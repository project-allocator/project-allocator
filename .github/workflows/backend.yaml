name: Backend CD

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}-backend
  PYVERSION_FILE: './backend/pyproject.toml'

on:
  push:
    paths:
      - "backend/**"
      - "!**.md"
  pull_request:
  workflow_dispatch:

defaults:
  run:
    working-directory: ./backend

jobs:

  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libpq-dev
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version-file: ${{ env.PYVERSION_FILE }}
          cache: 'poetry'
      - name: Install dependencies
        run: poetry install


  check-imports-ordering:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version-file: ${{ env.PYVERSION_FILE }}
          cache: 'poetry'
      - name: Check style
        run: poetry run ruff check --select I


  test:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version-file: ${{ env.PYVERSION_FILE }}
          cache: 'poetry'
      - name: Run tests with coverage
        run: poetry run pytest --junitxml=report.xml --cov=api/ --cov-report=xml --cov-report=term-missing tests/


  build-and-push-image:
    needs:
      - check-imports-ordering
      - test
    if: github.ref == 'refs/heads/main' # Only run on 'main'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    outputs:
      sha-tag: sha-${{ github.sha }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build tags
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }} 
          tags: |
            type=raw,value=${{ github.sha }},prefix=sha-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: "{{ defaultContext }}:backend"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.IMAGE_NAME }}:latest

  apply-db-migrations:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main' 
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version-file: ${{ env.PYVERSION_FILE }}
          cache: 'poetry'
      - name: Apply all pending migrations to the database
        run: alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-via-tsuru:
    runs-on: ubuntu-latest
    needs: apply-db-migrations
    if: github.ref == 'refs/heads/main'
    env:
      TSURU_TOKEN: ${{ secrets.TSURU_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install tsuru CLI
        run: curl -fsSL "https://tsuru.io/get" | bash
      - name: Add impaas target
        run: tsuru target add impaas https://impaas.uk -s
      - name: Deploy app
        run: tsuru app deploy -i ${{ env.IMAGE_NAME }}:latest -a urop-project-allocator-backend

