name: Deploy Application

env:
  REGISTRY: ghcr.io

on:
  push:
    branches:
      - main
      - 'feat-*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency: production

jobs:
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    outputs:
      sha-tag: sha-${{ github.sha }}

    strategy:
      matrix:
        component: ["frontend", "backend"]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
					registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build tags
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.component }}
          tags: |
            type=raw,value=${{ github.sha }},prefix=sha-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
			# This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: "{{ defaultContext  }}:${{ matrix.component }}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.component }}:latest

