name: Deploy Application

on:
  pull_request:
    branches: 
      - main
  workflow_dispatch:

concurrency: production

jobs:
  push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    outputs:
      sha-tag: sha-${{ github.sha }}

    strategy:
      matrix:
        component: ["frontend", "backend"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build tags
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.component }}
          tags: |
            type=raw,value=${{ github.sha }},prefix=sha-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push images
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            ghcr.io/${{ github.repository }}-${{ matrix.component }}:latest

  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    needs:
      - push

    container:
      image: quay.io/appvia-wayfinder/wftoolbox:${{ vars.WAYFINDER_VERSION }}
      env:
        WAYFINDER_TOKEN: ${{ secrets.WAYFINDER_TOKEN }}
        WAYFINDER_SERVER: ${{ vars.WAYFINDER_SERVER }}
        WAYFINDER_WORKSPACE: ${{ vars.WAYFINDER_WORKSPACE }}
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          # These are not found in Appvia's wftoolbox image.
          apk add --no-cache bash sed

      - name: Get Kubernetes access
        run: |
          wf access env project-allocator dev

      - name: Clean pods
        run: |
          bash .github/scripts/clean_pods.sh '' status.phase!=Running,status.phase!=Pending

      - name: Apply Wayfinder configurations
        run: |
          csrf_secret=${{ secrets.CSRF_SECRET }}
          server_name=${{ secrets.DATABASE_SERVER_NAME }}
          administrator_login=${{ secrets.DATABASE_ADMINISTRATOR_LOGIN }}
          administrator_password=${{ secrets.DATABASE_ADMINISTRATOR_PASSWORD }}
          repository=${{ github.repository }}

          sed -i -e "s/<CSRF_SECRET>/$csrf_secret/g" manifests/backend.yaml
          sed -i -e "s/<SERVER_NAME>/$server_name/g;s/<ADMINISTRATOR_LOGIN>/$administrator_login/g;s/<ADMINISTRATOR_PASSWORD>/$administrator_password/g" manifests/db.yaml
          sed -i -e "s%<REPOSITORY>%$repository%g" manifests/frontend.yaml
          sed -i -e "s%<REPOSITORY>%$repository%g" manifests/backend.yaml

          wf apply -f manifests/app.yaml
          wf apply -f manifests/env.yaml
          wf apply -f manifests/db.yaml
          wf apply -f manifests/frontend.yaml
          wf apply -f manifests/backend.yaml

      - name: Deploy application
        run: |
          wf deploy component project-allocator dev --component frontend --image-tag ${{ needs.push.outputs.sha-tag }} --force
          wf deploy component project-allocator dev --component backend --image-tag ${{ needs.push.outputs.sha-tag }} --force
          wf deploy component project-allocator dev --component db --force

      - name: Patch secret
        run: |
          namespace=${{ vars.WAYFINDER_WORKSPACE }}-project-allocator-dev
          kubectl patch deployment frontend -n "$namespace" --patch "$(cat manifests/secret-patch.json)"
          kubectl patch deployment backend -n "$namespace" --patch "$(cat manifests/secret-patch.json)"

      - name: Patch ingress
        run: |
          kubectl patch ingress frontend-ingress --type json --patch "$(cat manifests/ingress-patch.json)"

      - name: Create network policy
        run: |
          kubectl apply -f manifests/backend-policy.yaml

      - name: Wait for completion
        run: |
          bash .github/scripts/wait_deploy.sh

      - name: Restart pods
        run: |
          # Restart previously running frontend and backend pods.
          bash .github/scripts/clean_pods.sh frontend status.phase=Running
          bash .github/scripts/clean_pods.sh backend status.phase=Running

      - name: Print application URL
        run: |
          url="$(kubectl get ingress --output json | jq -r '.items[0].spec.rules[0].host')"
          echo "Your application is deployed at: https://$url"
